{"content": {"suites": {"0": {"status": {"total_pass": 0, "total_skip": 0, "total_xpass": 0, "total_xfail": 0, "total_rerun": 0, "total_fail": 0, "total_error": 1}, "tests": {"0": {"status": "ERROR", "message": "self = <Test_passwordUpdate.Test_Sifre object at 0x0000013410CDE6C0>\n\n    def setup_method(self):\n      self.driver=webdriver.Chrome()\n>     self.driver.maximize_window()\n\nTest_passwordUpdate.py:16: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:499: in maximize_window\n    self.execute(command, None)\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\webdriver.py:347: in execute\n    self.error_handler.check_response(response)\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.remote.errorhandler.ErrorHandler object at 0x000001340E986150>\nresponse = {'status': 400, 'value': '{\"value\":{\"error\":\"no such execution context\",\"message\":\"no such execution context\\\\n  (Sess...07FF6E78E18A4]\\\\n\\\\tBaseThreadInitThunk [0x00007FF80AD7257D+29]\\\\n\\\\tRtlUserThreadStart [0x00007FF80BCAAA48+40]\\\\n\"}}'}\n\n    def check_response(self, response: Dict[str, Any]) -> None:\n        \"\"\"Checks that a JSON response from the WebDriver does not have an\n        error.\n    \n        :Args:\n         - response - The JSON response from the WebDriver server as a dictionary\n           object.\n    \n        :Raises: If the response contains an error message.\n        \"\"\"\n        status = response.get(\"status\", None)\n        if not status or status == ErrorCode.SUCCESS:\n            return\n        value = None\n        message = response.get(\"message\", \"\")\n        screen: str = response.get(\"screen\", \"\")\n        stacktrace = None\n        if isinstance(status, int):\n            value_json = response.get(\"value\", None)\n            if value_json and isinstance(value_json, str):\n                import json\n    \n                try:\n                    value = json.loads(value_json)\n                    if len(value) == 1:\n                        value = value[\"value\"]\n                    status = value.get(\"error\", None)\n                    if not status:\n                        status = value.get(\"status\", ErrorCode.UNKNOWN_ERROR)\n                        message = value.get(\"value\") or value.get(\"message\")\n                        if not isinstance(message, str):\n                            value = message\n                            message = message.get(\"message\")\n                    else:\n                        message = value.get(\"message\", None)\n                except ValueError:\n                    pass\n    \n        exception_class: Type[WebDriverException]\n        e = ErrorCode()\n        error_codes = [item for item in dir(e) if not item.startswith(\"__\")]\n        for error_code in error_codes:\n            error_info = getattr(ErrorCode, error_code)\n            if isinstance(error_info, list) and status in error_info:\n                exception_class = getattr(ExceptionMapping, error_code, WebDriverException)\n                break\n        else:\n            exception_class = WebDriverException\n    \n        if not value:\n            value = response[\"value\"]\n        if isinstance(value, str):\n            raise exception_class(value)\n        if message == \"\" and \"message\" in value:\n            message = value[\"message\"]\n    \n        screen = None  # type: ignore[assignment]\n        if \"screen\" in value:\n            screen = value[\"screen\"]\n    \n        stacktrace = None\n        st_value = value.get(\"stackTrace\") or value.get(\"stacktrace\")\n        if st_value:\n            if isinstance(st_value, str):\n                stacktrace = st_value.split(\"\\n\")\n            else:\n                stacktrace = []\n                try:\n                    for frame in st_value:\n                        line = frame.get(\"lineNumber\", \"\")\n                        file = frame.get(\"fileName\", \"<anonymous>\")\n                        if line:\n                            file = f\"{file}:{line}\"\n                        meth = frame.get(\"methodName\", \"<anonymous>\")\n                        if \"className\" in frame:\n                            meth = f\"{frame['className']}.{meth}\"\n                        msg = \"    at %s (%s)\"\n                        msg = msg % (meth, file)\n                        stacktrace.append(msg)\n                except TypeError:\n                    pass\n        if exception_class == UnexpectedAlertPresentException:\n            alert_text = None\n            if \"data\" in value:\n                alert_text = value[\"data\"].get(\"text\")\n            elif \"alert\" in value:\n                alert_text = value[\"alert\"].get(\"text\")\n            raise exception_class(message, screen, stacktrace, alert_text)  # type: ignore[call-arg]  # mypy is not smart enough here\n>       raise exception_class(message, screen, stacktrace)\nE       selenium.common.exceptions.WebDriverException: Message: no such execution context\nE         (Session info: chrome=124.0.6367.119)\nE       Stacktrace:\nE       \tGetHandleVerifier [0x00007FF6E7971502+60802]\nE       \t(No symbol) [0x00007FF6E78EAC02]\nE       \t(No symbol) [0x00007FF6E77A7B13]\nE       \t(No symbol) [0x00007FF6E77905E0]\nE       \t(No symbol) [0x00007FF6E778EC3D]\nE       \t(No symbol) [0x00007FF6E778F3FF]\nE       \t(No symbol) [0x00007FF6E779E97E]\nE       \t(No symbol) [0x00007FF6E77B57CF]\nE       \t(No symbol) [0x00007FF6E77BB38A]\nE       \t(No symbol) [0x00007FF6E778FB85]\nE       \t(No symbol) [0x00007FF6E77B53AE]\nE       \t(No symbol) [0x00007FF6E783A0FF]\nE       \t(No symbol) [0x00007FF6E781A923]\nE       \t(No symbol) [0x00007FF6E77E8FEC]\nE       \t(No symbol) [0x00007FF6E77E9C21]\nE       \tGetHandleVerifier [0x00007FF6E7C7411D+3217821]\nE       \tGetHandleVerifier [0x00007FF6E7CB60B7+3488055]\nE       \tGetHandleVerifier [0x00007FF6E7CAF03F+3459263]\nE       \tGetHandleVerifier [0x00007FF6E7A2B846+823494]\nE       \t(No symbol) [0x00007FF6E78F5F9F]\nE       \t(No symbol) [0x00007FF6E78F0EC4]\nE       \t(No symbol) [0x00007FF6E78F1052]\nE       \t(No symbol) [0x00007FF6E78E18A4]\nE       \tBaseThreadInitThunk [0x00007FF80AD7257D+29]\nE       \tRtlUserThreadStart [0x00007FF80BCAAA48+40]\n\n..\\..\\..\\AppData\\Local\\Programs\\Python\\Python312\\Lib\\site-packages\\selenium\\webdriver\\remote\\errorhandler.py:229: WebDriverException\n", "test_name": "test_minSixDigitPassword", "rerun": "0"}}, "suite_name": "Test_passwordUpdate.py"}}}, "date": "May 06, 2024", "start_time": 1714968813.3446348, "total_suite": 1, "status": "FAIL", "status_list": {"pass": "0", "fail": "0", "skip": "0", "error": "1", "xpass": "0", "xfail": "0", "rerun": "0"}, "total_tests": "1"}